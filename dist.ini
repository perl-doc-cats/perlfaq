name     = perlfaq
abstract = Frequently asked questions about Perl
author   = Tom Christiansen <tchrist@perl.com>
author   = Nat Torkington <gnat@frii.com>
author   = brian d foy <bdfoy@cpan.org>
author   = Leo Lapworth <LLAP@cpan.org>
author   = perlfaq-workers <perlfaq-workers@perl.org>
author   = The Perl 5 Porters <perl5-porters@perl.org>
license  = Perl_5
copyright_holder = Tom Christiansen, Nathan Torkington, and others

:version = 6.014    ; . in @INC

[AutoVersion]
format = 5.{{ cldr('yyyyMMdd') . ($ENV{DEV} ? sprintf('_%03u', $ENV{DEV}) : '') }}

[MetaYAML]
[MetaJSON]
[License]
[Readme]
[MakeMaker]
[Manifest]
[TestRelease]
[UploadToCPAN]

; authordep Software::License::Perl_5 = 0.103009

[Git::GatherDir]
exclude_filename = LICENSE
exclude_filename = README.pod   ; cannot be included in the tarball or it will be installed!
exclude_filename = bin/check_links

[RunExtraTests]
:version = 0.019
default_jobs = 9

[DualLife]
entered_core = 5.015000

[MetaConfig]
[MinimumPerl]
:version = 1.006
configure_finder = :NoFiles

[Test::Compile]
[PodSyntaxTests]
[Test::NoTabs]
[Test::EOL]
;[Test::PodSpelling]     ; TODO: but create in the dist, with a huge stopword list
[Test::ChangesHasContent]
[MojibakeTests]
[Test::Portability]
[Test::MinimumVersion]
:version = 2.000003
max_target_perl = 5.006

[MetaResources]
repository.type   = git
repository.url    = https://github.com/perl-doc-cats/perlfaq.git
repository.web    = https://github.com/perl-doc-cats/perlfaq
bugtracker.web    = https://github.com/perl-doc-cats/perlfaq/issues
homepage          = https://metacpan.org/release/perlfaq
x_IRC             = irc://irc.perl.org/#perl-faq

[Git::Contributors]

[Authority]
authority = cpan:LLAP
do_metadata = 1
do_munging = 0

[MetaNoIndex]
directory = inc

[=inc::CreateQuestionList]
;  authordep Template
;  authordep HTML::TreeBuilder
;  authordep Pod::Simple::XHTML

[FileFinder::Filter / PodFiles]
finder = :InstallModules
skip = \.pm$
[PodVersion]
finder = PodFiles

[Git::Check]
:version = 2.025
build_warnings = 1
allow_dirty =

[Git::CheckFor::MergeConflicts]

[Git::CheckFor::CorrectBranch]
:version = 0.004
release_branch = master

[Git::Remote::Check]
branch = master
remote_branch = master

[CopyFilesFromRelease]
filename = LICENSE

[@Git::VersionManager]
RewriteVersion::Transitional.skip_version_provider = 1
commit_files_after_release = LICENSE

[Git::Push]

[ConfirmRelease]
